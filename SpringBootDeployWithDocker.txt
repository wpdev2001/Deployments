# Steps for the deployment
1. Create the project

2. Pagkage it to jar or war file
   Steps for the packaging jar file
   a. Use the Maven tab (on right side of IntelliJ)
   b. go to "Execute maven goal" tab
   c. run "mvn clean install" or "mvn clean package"
   Check for the target folder for the JAR file, the file has been created there

3. Create a docker file
   >> From openjdk:21
   >> WORKDIR /urs/src/myapp
   >> COPY . /urs/src/myapp/
   >> CMD [ "java", "-jar", "TestApp-0.0.1-SNAPSHOT.jar" ]
   >> EXPOSE 9090

   OR

   >> FROM OpenJDK:21 
   >> Add target/TestApp-0.0.1-SNAPSHOT.jar test-app.jar 
   >> ENTRYPOINT ["java", "-jar", "TestApp-0.0.1-SNAPSHOT.jar"]

4. Build the docker file using: 
    >>  docker build -t bootimage .

5. Run the docker image using command(check for the image first and also the port which you've used, in this case it is 9090)
      >> docker run --name bootProject -it -p 9090:9090 -d bootimage
      OR 
      >> docker run -d --name mytodoapp -p 9090:9090 --network=bootApp -e MYSQL_HOST=mysqldb -e MYSQL_PORT=3306 todoapp  //(This command is the actual implementation where its also connecting to the mysql at specific port using a command network which we have created "bootApp")
      NOTE: 
         1. The first thing required is Mysql container running on docker for that use the following comamnds
            >> docker pull mysql
            >> docker run -d --name mysqldb -p 3307:3306 --network=bootApp -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=testdb mysql (here also we have used the common n/w)
         2. The port which is used here is of container's side whereas my local machine is using the 3307 port for MySQL

   How to create the common network in docker and what is its use?
   >> docker network create bootApp
      use case: Creating a common user-defined network (like bootApp) in Docker is useful when you want multiple containers to communicate with each other by name, especially in a multi-container setup such as:
                  A Spring Boot application running in one container
                  A MySQL database running in another container
                  Both containers can be connected to the same custom network (bootApp). This allows the Spring Boot app to connect to MySQL using the container name (e.g., mysqldb) as the hostname, without needing to expose or map ports to the host machine.
      

6. To stop it you could use
      docker stop bootProject

7. To check for the logs you could run
      docker logs <container_name>

8. Now push the image on the docker hub by doing login 
   >> docker login (give the credentials)
   >> docker tag todoapp wpdev2001/todoapp1.0 (here we're actullay tagged the local image(todoapp) to "wpdev2001/todoapp1.0" )
   >> docker push wpdev2001/todoapp:1.0 (pass with the proper tag name)
   Once the image is getting pushed to docker hub now you no more need the local images and container delete them all and pull the image from the docker hub now using
   >> docker pull wpdev2001/todoapp:1.0
   Run the image to create the container
   >> docker run -d --name mytodoapp -p 9090:9090 --network=bootApp -e MYSQL_HOST=mysqldb -e MYSQL_PORT=3306 wpdev2001/todoapp:1.0  (note: its important to pass the tag here "1.0")
   >> docker logs mytodoapp

   ADDON
   -----
   If you want to make :1.0 the default tag, you can retag it locally:
   >> docker tag wpdev2001/todoapp:1.0 wpdev2001/todoapp:latest
   >> docker run -d --name mytodoapp -p 9090:9090 --network=bootApp -e MYSQL_HOST=mysqldb -e MYSQL_PORT=3306 wpdev2001/todoapp

10. create an Ubuntu VM on aws and connect to it using ssh
   >> ssh -i "bootkey.pem" ubuntu@ec2-13-233-151-44.ap-south-1.compute.amazonaws.com
   >> sudo su
   >> apt update & upgrade
   >> sudo apt-get install docker.io -y     // intalling docker on ec2
   Run following commands to fetch and run the cotainers directly(If the image isn't present locally then it will directly fetch from dockerhub)
   >> docker run -d --name mysqldb -p 3307:3306 --network=bootApp -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=testdb mysql
   >> docker run -d --name mytodoapp -p 9090:9090 --network=bootApp -e MYSQL_HOST=mysqldb -e MYSQL_PORT=3306 wpdev2001/todoapp:1.0
   Temp url: http://13.200.65.78:9090/
